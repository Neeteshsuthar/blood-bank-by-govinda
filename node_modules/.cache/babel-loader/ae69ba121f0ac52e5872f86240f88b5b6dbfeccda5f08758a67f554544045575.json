{"ast":null,"code":"// import Swal from \"sweetalert2\";\n// import React from \"react\";\n// import { auth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, db } from \"../init-firebase\";\n// import { doc, setDoc } from \"firebase/firestore\";\n// import Mycontext from \"./Mycontext\";\n\n// const Myprovider = ({ children }) => {\n\n//   // Signup Function \n\n//   const SignupFirebase = async (name, email, password, url, address,doners,role) => {\n\n//     if (name && email && password) {\n\n//       createUserWithEmailAndPassword(auth, email, password)\n//   .then((userCredential) => {\n//     // Signed up \n//     const user = userCredential.user;\n//     Swal.fire(\"Wow brother, good job! User registered successfully.\");\n//         console.log(\"User saved to Firestore:\", user);\n//       setDoc(doc(db, \"users\", user.uid), {\n//             name: name,\n//             email: email,\n//             role:role,\n//             password: password,\n//             uid: user.uid,\n//             url:url,\n//             doners:doners,\n//             address: address,\n//             createdAt: new Date(),\n//           });\n\n//     // ...\n//   })\n//   .catch((error) => {\n//     const errorCode = error.code;\n//     const errorMessage = error.message;\n//     console.log(\"Error signing up:\", errorCode,errorMessage);\n//         Swal.fire(\"Error signing up. Please try again.\");\n//   });\n\n// }else{\n//   Swal.fire(\"Please fill all fields.\");\n// }\n//   };\n//   // SignIn Exist User\n\n//   const SignInfirebase = async (email, password) => {\n//     if (email && password) {\n//       try {\n//         const userCredential = await signInWithEmailAndPassword(auth, email, password);\n//         const user = userCredential.user;\n//         Swal.fire(\"Wow brother, Great! Signed in successfully.\");\n//         console.log(\"Signed in user:\", user);\n\n//       } catch (error) {\n//         console.error(\"Error signing in:\", error.message);\n//         Swal.fire(\"Error signing In. Please try again.\");\n\n//       }\n//     } else {\n//       Swal.fire(\"Please fill all fields.\");\n//     }\n//   };\n//   // Forget Password Function\n//   const ForgetPassword = async (email) => {\n//     if (email) {\n//       try {\n//         await sendPasswordResetEmail(auth, email);\n//         Swal.fire(\"Password reset email sent successfully!\");\n//       } catch (error) {\n//         console.error(\"Error resetting password:\", error.message);\n//         Swal.fire(\"Error resetting password. Please try again.\");\n//       }\n//     } else {\n//       Swal.fire(\"Please provide your email.\");\n//     }\n//   };\n\n//   return (\n//     <Mycontext.Provider value={{SignupFirebase,SignInfirebase, ForgetPassword,}}\n//     >\n//       {children}\n//     </Mycontext.Provider>\n//   );\n// };\n\n// export default Myprovider;","map":{"version":3,"names":[],"sources":["C:/Desktop/test project/myapp/src/context/Myprovider.jsx"],"sourcesContent":["// import Swal from \"sweetalert2\";\r\n// import React from \"react\";\r\n// import { auth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, db } from \"../init-firebase\";\r\n// import { doc, setDoc } from \"firebase/firestore\";\r\n// import Mycontext from \"./Mycontext\";\r\n\r\n// const Myprovider = ({ children }) => {\r\n \r\n//   // Signup Function \r\n \r\n//   const SignupFirebase = async (name, email, password, url, address,doners,role) => {\r\n    \r\n//     if (name && email && password) {\r\n\r\n//       createUserWithEmailAndPassword(auth, email, password)\r\n//   .then((userCredential) => {\r\n//     // Signed up \r\n//     const user = userCredential.user;\r\n//     Swal.fire(\"Wow brother, good job! User registered successfully.\");\r\n//         console.log(\"User saved to Firestore:\", user);\r\n//       setDoc(doc(db, \"users\", user.uid), {\r\n//             name: name,\r\n//             email: email,\r\n//             role:role,\r\n//             password: password,\r\n//             uid: user.uid,\r\n//             url:url,\r\n//             doners:doners,\r\n//             address: address,\r\n//             createdAt: new Date(),\r\n//           });\r\n    \r\n\r\n\r\n//     // ...\r\n//   })\r\n//   .catch((error) => {\r\n//     const errorCode = error.code;\r\n//     const errorMessage = error.message;\r\n//     console.log(\"Error signing up:\", errorCode,errorMessage);\r\n//         Swal.fire(\"Error signing up. Please try again.\");\r\n//   });\r\n  \r\n// }else{\r\n//   Swal.fire(\"Please fill all fields.\");\r\n// }\r\n//   };\r\n//   // SignIn Exist User\r\n\r\n//   const SignInfirebase = async (email, password) => {\r\n//     if (email && password) {\r\n//       try {\r\n//         const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n//         const user = userCredential.user;\r\n//         Swal.fire(\"Wow brother, Great! Signed in successfully.\");\r\n//         console.log(\"Signed in user:\", user);\r\n       \r\n//       } catch (error) {\r\n//         console.error(\"Error signing in:\", error.message);\r\n//         Swal.fire(\"Error signing In. Please try again.\");\r\n       \r\n//       }\r\n//     } else {\r\n//       Swal.fire(\"Please fill all fields.\");\r\n//     }\r\n//   };\r\n//   // Forget Password Function\r\n//   const ForgetPassword = async (email) => {\r\n//     if (email) {\r\n//       try {\r\n//         await sendPasswordResetEmail(auth, email);\r\n//         Swal.fire(\"Password reset email sent successfully!\");\r\n//       } catch (error) {\r\n//         console.error(\"Error resetting password:\", error.message);\r\n//         Swal.fire(\"Error resetting password. Please try again.\");\r\n//       }\r\n//     } else {\r\n//       Swal.fire(\"Please provide your email.\");\r\n//     }\r\n//   };\r\n  \r\n\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <Mycontext.Provider value={{SignupFirebase,SignInfirebase, ForgetPassword,}}\r\n//     >\r\n//       {children}\r\n//     </Mycontext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default Myprovider;\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}