{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\test project\\\\myapp\\\\src\\\\components\\\\Herosec.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from \"react\";\n// import { setDoc, doc, arrayUnion, query, where, getDocs, collection } from \"firebase/firestore\";\n// import Swal from \"sweetalert2\";\n// import { db } from \"../init-firebase\";\n\n// const Hero = () => {\n//     const [selectedCity, setSelectedCity] = useState(\"\");\n//     const [selectedBloodGroup, setSelectedBloodGroup] = useState(\"\");\n//     const [matchingReceivers, setMatchingReceivers] = useState([]);\n\n//     const handleCityChange = (e) => {\n//         setSelectedCity(e.target.value);\n//       };\n\n//       const handleBloodGroupChange = (e) => {\n//         setSelectedBloodGroup(e.target.value);\n//       };\n\n//       const handleDonateClick = async () => {\n//         try {\n//           if (selectedCity && selectedBloodGroup) {\n//             // Query Firestore for matching receivers\n//             const q = query(\n//               collection(db, \"users\"),\n//               where(\"bloodGroup\", \"==\", selectedBloodGroup),\n//               where(\"city\", \"==\", selectedCity)\n//             );\n\n//             const querySnapshot = await getDocs(q);\n//             const receivers = querySnapshot.docs.map(doc => doc.data());\n\n//             if (receivers.length > 0) {\n//               setMatchingReceivers(receivers);\n\n//               // Log donor details to Firestore (optional)\n//               const donorRef = doc(db, \"users\", \"donor-email@example.com\");\n//               await setDoc(donorRef, {\n//                 donations: arrayUnion({\n//                   bloodGroup: selectedBloodGroup,\n//                   city: selectedCity,\n//                   timestamp: new Date(),\n//                 }),\n//               }, { merge: true });\n\n//               Swal.fire(\"Success!\", \"Matching receiver(s) found, donation successful.\", \"success\");\n//             } else {\n//               Swal.fire(\"No Match\", \"No matching receivers found in the selected city.\", \"info\");\n//             }\n//           } else {\n//             Swal.fire(\"Error\", \"Please select both a city and a blood group.\", \"error\");\n//           }\n//         } catch (error) {\n//           console.error(\"Error finding matching receivers: \", error);\n//           Swal.fire(\"Error\", \"Something went wrong.\", \"error\");\n//         }\n//       };\n//   return (\n//     <section className=\"hero\">\n//     <div className=\"hero-text\">\n//       <h2>Donate Blood to Save Lives</h2>\n//       <p>Select your city and blood group to find matching receivers.</p>\n\n//       {/* City Dropdown */}\n//       <div className=\"dropdown-container\">\n//         <label htmlFor=\"city\">City:</label>\n//         <select id=\"city\" value={selectedCity} onChange={handleCityChange}>\n//           <option value=\"\">Select City</option>\n//           <option value=\"Karachi\">Karachi</option>\n//           <option value=\"Lahore\">Lahore</option>\n//           <option value=\"Islamabad\">Islamabad</option>\n//           <option value=\"Peshawar\">Peshawar</option>\n//           <option value=\"Quetta\">Quetta</option>\n//         </select>\n//       </div>\n\n//       {/* Blood Group Dropdown */}\n//       <div className=\"dropdown-container\">\n//         <label htmlFor=\"blood-group\">Blood Group:</label>\n//         <select id=\"blood-group\" value={selectedBloodGroup} onChange={handleBloodGroupChange}>\n//           <option value=\"\">Select Blood Group</option>\n//           <option value=\"A+\">A+</option>\n//           <option value=\"A-\">A-</option>\n//           <option value=\"B+\">B+</option>\n//           <option value=\"B-\">B-</option>\n//           <option value=\"O+\">O+</option>\n//           <option value=\"O-\">O-</option>\n//           <option value=\"AB+\">AB+</option>\n//           <option value=\"AB-\">AB-</option>\n//         </select>\n//       </div>\n\n//       <button onClick={handleDonateClick} className=\"cta-btn\">\n//         Donate Blood\n//       </button>\n//     </div>\n\n//     {/* Render Matching Receivers */}\n//     {matchingReceivers.length > 0 && (\n//       <div className=\"matching-receivers\">\n//         <h3>Matching Receivers</h3>\n//         <div className=\"receiver-cards\">\n//           {matchingReceivers.map((receiver, index) => (\n//             <div key={index} className=\"receiver-card\">\n//               <h4>{receiver.name}</h4>\n//               <p>Blood Group: {receiver.bloodGroup}</p>\n//               <p>City: {receiver.city}</p>\n//               <p>Contact: {receiver.contact}</p>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n//     )}\n//   </section>\n// );\n// };\nimport React, { useState } from \"react\";\nimport Swal from \"sweetalert2\";\nimport { collection, query, where, getDocs, addDoc } from \"firebase/firestore\";\nimport { db } from \"../init-firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Hero = () => {\n  _s();\n  const [results, setResults] = useState([]); // State to store matching results\n  const [actionType, setActionType] = useState(\"\"); // To track if it's Donate or Receive\n\n  const handleButtonClick = async action => {\n    // Show SweetAlert2 prompt for city and blood group\n    const {\n      value: formValues\n    } = await Swal.fire({\n      title: `${action === \"donate\" ? \"Donate Blood\" : \"Receive Blood\"}`,\n      html: `<input id=\"swal-input1\" class=\"swal2-input\" placeholder=\"Enter your city\">` + `<input id=\"swal-input2\" class=\"swal2-input\" placeholder=\"Enter your blood group (e.g., A+, O-)\">`,\n      focusConfirm: false,\n      showCancelButton: true,\n      confirmButtonText: \"Submit\",\n      preConfirm: () => {\n        const city = document.getElementById(\"swal-input1\").value;\n        const bloodGroup = document.getElementById(\"swal-input2\").value;\n        if (!city || !bloodGroup) {\n          Swal.showValidationMessage(\"Please fill out both fields!\");\n        }\n        return {\n          city,\n          bloodGroup\n        };\n      }\n    });\n    if (!formValues) return; // Exit if the user cancels the action\n\n    const {\n      city,\n      bloodGroup\n    } = formValues;\n    try {\n      if (action === \"donate\") {\n        // Donor flow: Check for matching receivers\n        const receiverQuery = query(collection(db, \"receivers\"), where(\"city\", \"==\", city), where(\"bloodGroup\", \"==\", bloodGroup));\n        const receiverSnapshot = await getDocs(receiverQuery);\n        if (!receiverSnapshot.empty) {\n          const receivers = [];\n          receiverSnapshot.forEach(doc => receivers.push(doc.data()));\n          setResults(receivers); // Set results to state\n          setActionType(\"donate\");\n        } else {\n          Swal.fire({\n            icon: \"info\",\n            title: \"No Match Found\",\n            text: \"Your details have been saved. We will notify you if a match is found.\"\n          });\n\n          // Save donor data to Firestore\n          await addDoc(collection(db, \"donors\"), {\n            city,\n            bloodGroup,\n            donatedAt: new Date()\n          });\n          setResults([]); // Clear results\n        }\n      } else if (action === \"receive\") {\n        // Receiver flow: Check for matching donors\n        const donorQuery = query(collection(db, \"donors\"), where(\"city\", \"==\", city), where(\"bloodGroup\", \"==\", bloodGroup));\n        const donorSnapshot = await getDocs(donorQuery);\n        if (!donorSnapshot.empty) {\n          const donors = [];\n          donorSnapshot.forEach(doc => donors.push(doc.data()));\n          setResults(donors); // Set results to state\n          setActionType(\"receive\");\n        } else {\n          Swal.fire({\n            icon: \"info\",\n            title: \"No Donors Found\",\n            text: \"Currently, there are no donors matching your request.\"\n          });\n          setResults([]); // Clear results\n        }\n      }\n    } catch (error) {\n      console.error(\"Error:\", error);\n      Swal.fire({\n        icon: \"error\",\n        title: \"An Error Occurred\",\n        text: \"Please try again later.\"\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"home-container text-center py-10\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl font-bold mb-6\",\n      children: \"Welcome to Blood Bank\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-lg mb-8\",\n      children: \"Donate or Receive blood with ease!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-x-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(\"donate\"),\n        className: \"bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600\",\n        children: \"Donate Blood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleButtonClick(\"receive\"),\n        className: \"bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600\",\n        children: \"Receive Blood\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), results.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-10\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-2xl font-semibold mb-4\",\n        children: actionType === \"donate\" ? \"Matching Receivers\" : \"Matching Donors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table-auto w-full border-collapse border border-gray-300\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-300 px-4 py-2\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-300 px-4 py-2\",\n              children: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-300 px-4 py-2\",\n              children: \"Blood Group\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"border border-gray-300 px-4 py-2\",\n              children: \"Contact\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: results.map((result, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-300 px-4 py-2\",\n              children: result.name || \"Anonymous\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-300 px-4 py-2\",\n              children: result.city\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-300 px-4 py-2\",\n              children: result.bloodGroup\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"border border-gray-300 px-4 py-2\",\n              children: result.contact || \"N/A\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 9\n    }, this), results.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-10 text-gray-500\",\n      children: \"No matching data available to display.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 218,\n    columnNumber: 5\n  }, this);\n};\n_s(Hero, \"Btr9M/cPnkOAuR1X62wNEOXr/po=\");\n_c = Hero;\nexport { Hero };\nvar _c;\n$RefreshReg$(_c, \"Hero\");","map":{"version":3,"names":["React","useState","Swal","collection","query","where","getDocs","addDoc","db","jsxDEV","_jsxDEV","Hero","_s","results","setResults","actionType","setActionType","handleButtonClick","action","value","formValues","fire","title","html","focusConfirm","showCancelButton","confirmButtonText","preConfirm","city","document","getElementById","bloodGroup","showValidationMessage","receiverQuery","receiverSnapshot","empty","receivers","forEach","doc","push","data","icon","text","donatedAt","Date","donorQuery","donorSnapshot","donors","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","result","index","name","contact","_c","$RefreshReg$"],"sources":["C:/Desktop/test project/myapp/src/components/Herosec.jsx"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import { setDoc, doc, arrayUnion, query, where, getDocs, collection } from \"firebase/firestore\";\r\n// import Swal from \"sweetalert2\";\r\n// import { db } from \"../init-firebase\";\r\n\r\n// const Hero = () => {\r\n//     const [selectedCity, setSelectedCity] = useState(\"\");\r\n//     const [selectedBloodGroup, setSelectedBloodGroup] = useState(\"\");\r\n//     const [matchingReceivers, setMatchingReceivers] = useState([]);\r\n\r\n//     const handleCityChange = (e) => {\r\n//         setSelectedCity(e.target.value);\r\n//       };\r\n    \r\n//       const handleBloodGroupChange = (e) => {\r\n//         setSelectedBloodGroup(e.target.value);\r\n//       };\r\n    \r\n//       const handleDonateClick = async () => {\r\n//         try {\r\n//           if (selectedCity && selectedBloodGroup) {\r\n//             // Query Firestore for matching receivers\r\n//             const q = query(\r\n//               collection(db, \"users\"),\r\n//               where(\"bloodGroup\", \"==\", selectedBloodGroup),\r\n//               where(\"city\", \"==\", selectedCity)\r\n//             );\r\n    \r\n//             const querySnapshot = await getDocs(q);\r\n//             const receivers = querySnapshot.docs.map(doc => doc.data());\r\n    \r\n//             if (receivers.length > 0) {\r\n//               setMatchingReceivers(receivers);\r\n    \r\n//               // Log donor details to Firestore (optional)\r\n//               const donorRef = doc(db, \"users\", \"donor-email@example.com\");\r\n//               await setDoc(donorRef, {\r\n//                 donations: arrayUnion({\r\n//                   bloodGroup: selectedBloodGroup,\r\n//                   city: selectedCity,\r\n//                   timestamp: new Date(),\r\n//                 }),\r\n//               }, { merge: true });\r\n    \r\n//               Swal.fire(\"Success!\", \"Matching receiver(s) found, donation successful.\", \"success\");\r\n//             } else {\r\n//               Swal.fire(\"No Match\", \"No matching receivers found in the selected city.\", \"info\");\r\n//             }\r\n//           } else {\r\n//             Swal.fire(\"Error\", \"Please select both a city and a blood group.\", \"error\");\r\n//           }\r\n//         } catch (error) {\r\n//           console.error(\"Error finding matching receivers: \", error);\r\n//           Swal.fire(\"Error\", \"Something went wrong.\", \"error\");\r\n//         }\r\n//       };\r\n//   return (\r\n//     <section className=\"hero\">\r\n//     <div className=\"hero-text\">\r\n//       <h2>Donate Blood to Save Lives</h2>\r\n//       <p>Select your city and blood group to find matching receivers.</p>\r\n\r\n//       {/* City Dropdown */}\r\n//       <div className=\"dropdown-container\">\r\n//         <label htmlFor=\"city\">City:</label>\r\n//         <select id=\"city\" value={selectedCity} onChange={handleCityChange}>\r\n//           <option value=\"\">Select City</option>\r\n//           <option value=\"Karachi\">Karachi</option>\r\n//           <option value=\"Lahore\">Lahore</option>\r\n//           <option value=\"Islamabad\">Islamabad</option>\r\n//           <option value=\"Peshawar\">Peshawar</option>\r\n//           <option value=\"Quetta\">Quetta</option>\r\n//         </select>\r\n//       </div>\r\n\r\n//       {/* Blood Group Dropdown */}\r\n//       <div className=\"dropdown-container\">\r\n//         <label htmlFor=\"blood-group\">Blood Group:</label>\r\n//         <select id=\"blood-group\" value={selectedBloodGroup} onChange={handleBloodGroupChange}>\r\n//           <option value=\"\">Select Blood Group</option>\r\n//           <option value=\"A+\">A+</option>\r\n//           <option value=\"A-\">A-</option>\r\n//           <option value=\"B+\">B+</option>\r\n//           <option value=\"B-\">B-</option>\r\n//           <option value=\"O+\">O+</option>\r\n//           <option value=\"O-\">O-</option>\r\n//           <option value=\"AB+\">AB+</option>\r\n//           <option value=\"AB-\">AB-</option>\r\n//         </select>\r\n//       </div>\r\n\r\n//       <button onClick={handleDonateClick} className=\"cta-btn\">\r\n//         Donate Blood\r\n//       </button>\r\n//     </div>\r\n\r\n//     {/* Render Matching Receivers */}\r\n//     {matchingReceivers.length > 0 && (\r\n//       <div className=\"matching-receivers\">\r\n//         <h3>Matching Receivers</h3>\r\n//         <div className=\"receiver-cards\">\r\n//           {matchingReceivers.map((receiver, index) => (\r\n//             <div key={index} className=\"receiver-card\">\r\n//               <h4>{receiver.name}</h4>\r\n//               <p>Blood Group: {receiver.bloodGroup}</p>\r\n//               <p>City: {receiver.city}</p>\r\n//               <p>Contact: {receiver.contact}</p>\r\n//             </div>\r\n//           ))}\r\n//         </div>\r\n//       </div>\r\n//     )}\r\n//   </section>\r\n// );\r\n// };\r\nimport React, { useState } from \"react\";\r\nimport Swal from \"sweetalert2\";\r\nimport { collection, query, where, getDocs, addDoc } from \"firebase/firestore\";\r\nimport { db } from \"../init-firebase\";\r\n\r\nconst Hero = () => {\r\n  const [results, setResults] = useState([]); // State to store matching results\r\n  const [actionType, setActionType] = useState(\"\"); // To track if it's Donate or Receive\r\n\r\n  const handleButtonClick = async (action) => {\r\n    // Show SweetAlert2 prompt for city and blood group\r\n    const { value: formValues } = await Swal.fire({\r\n      title: `${action === \"donate\" ? \"Donate Blood\" : \"Receive Blood\"}`,\r\n      html:\r\n        `<input id=\"swal-input1\" class=\"swal2-input\" placeholder=\"Enter your city\">` +\r\n        `<input id=\"swal-input2\" class=\"swal2-input\" placeholder=\"Enter your blood group (e.g., A+, O-)\">`,\r\n      focusConfirm: false,\r\n      showCancelButton: true,\r\n      confirmButtonText: \"Submit\",\r\n      preConfirm: () => {\r\n        const city = document.getElementById(\"swal-input1\").value;\r\n        const bloodGroup = document.getElementById(\"swal-input2\").value;\r\n\r\n        if (!city || !bloodGroup) {\r\n          Swal.showValidationMessage(\"Please fill out both fields!\");\r\n        }\r\n        return { city, bloodGroup };\r\n      },\r\n    });\r\n\r\n    if (!formValues) return; // Exit if the user cancels the action\r\n\r\n    const { city, bloodGroup } = formValues;\r\n\r\n    try {\r\n      if (action === \"donate\") {\r\n        // Donor flow: Check for matching receivers\r\n        const receiverQuery = query(\r\n          collection(db, \"receivers\"),\r\n          where(\"city\", \"==\", city),\r\n          where(\"bloodGroup\", \"==\", bloodGroup)\r\n        );\r\n\r\n        const receiverSnapshot = await getDocs(receiverQuery);\r\n\r\n        if (!receiverSnapshot.empty) {\r\n          const receivers = [];\r\n          receiverSnapshot.forEach((doc) => receivers.push(doc.data()));\r\n          setResults(receivers); // Set results to state\r\n          setActionType(\"donate\");\r\n        } else {\r\n          Swal.fire({\r\n            icon: \"info\",\r\n            title: \"No Match Found\",\r\n            text: \"Your details have been saved. We will notify you if a match is found.\",\r\n          });\r\n\r\n          // Save donor data to Firestore\r\n          await addDoc(collection(db, \"donors\"), {\r\n            city,\r\n            bloodGroup,\r\n            donatedAt: new Date(),\r\n          });\r\n\r\n          setResults([]); // Clear results\r\n        }\r\n      } else if (action === \"receive\") {\r\n        // Receiver flow: Check for matching donors\r\n        const donorQuery = query(\r\n          collection(db, \"donors\"),\r\n          where(\"city\", \"==\", city),\r\n          where(\"bloodGroup\", \"==\", bloodGroup)\r\n        );\r\n\r\n        const donorSnapshot = await getDocs(donorQuery);\r\n\r\n        if (!donorSnapshot.empty) {\r\n          const donors = [];\r\n          donorSnapshot.forEach((doc) => donors.push(doc.data()));\r\n          setResults(donors); // Set results to state\r\n          setActionType(\"receive\");\r\n        } else {\r\n          Swal.fire({\r\n            icon: \"info\",\r\n            title: \"No Donors Found\",\r\n            text: \"Currently, there are no donors matching your request.\",\r\n          });\r\n\r\n          setResults([]); // Clear results\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n      Swal.fire({\r\n        icon: \"error\",\r\n        title: \"An Error Occurred\",\r\n        text: \"Please try again later.\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"home-container text-center py-10\">\r\n      <h1 className=\"text-4xl font-bold mb-6\">Welcome to Blood Bank</h1>\r\n      <p className=\"text-lg mb-8\">Donate or Receive blood with ease!</p>\r\n\r\n      <div className=\"space-x-4\">\r\n        {/* Donate Button */}\r\n        <button\r\n          onClick={() => handleButtonClick(\"donate\")}\r\n          className=\"bg-red-500 text-white px-6 py-2 rounded-lg hover:bg-red-600\"\r\n        >\r\n          Donate Blood\r\n        </button>\r\n\r\n        {/* Receive Button */}\r\n        <button\r\n          onClick={() => handleButtonClick(\"receive\")}\r\n          className=\"bg-blue-500 text-white px-6 py-2 rounded-lg hover:bg-blue-600\"\r\n        >\r\n          Receive Blood\r\n        </button>\r\n      </div>\r\n\r\n      {/* Display Matching Results */}\r\n      {results.length > 0 && (\r\n        <div className=\"mt-10\">\r\n          <h2 className=\"text-2xl font-semibold mb-4\">\r\n            {actionType === \"donate\" ? \"Matching Receivers\" : \"Matching Donors\"}\r\n          </h2>\r\n          <table className=\"table-auto w-full border-collapse border border-gray-300\">\r\n            <thead>\r\n              <tr>\r\n                <th className=\"border border-gray-300 px-4 py-2\">Name</th>\r\n                <th className=\"border border-gray-300 px-4 py-2\">City</th>\r\n                <th className=\"border border-gray-300 px-4 py-2\">Blood Group</th>\r\n                <th className=\"border border-gray-300 px-4 py-2\">Contact</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {results.map((result, index) => (\r\n                <tr key={index}>\r\n                  <td className=\"border border-gray-300 px-4 py-2\">{result.name || \"Anonymous\"}</td>\r\n                  <td className=\"border border-gray-300 px-4 py-2\">{result.city}</td>\r\n                  <td className=\"border border-gray-300 px-4 py-2\">{result.bloodGroup}</td>\r\n                  <td className=\"border border-gray-300 px-4 py-2\">{result.contact || \"N/A\"}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n\r\n      {/* No Results Found */}\r\n      {results.length === 0 && (\r\n        <p className=\"mt-10 text-gray-500\">No matching data available to display.</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport {Hero};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}