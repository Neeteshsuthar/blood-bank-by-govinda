{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\test project\\\\myapp\\\\src\\\\context\\\\Myprovider.jsx\";\nimport Swal from \"sweetalert2\";\nimport React from \"react\";\nimport { auth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, db } from \"../init-firebase\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport Mycontext from \"./Mycontext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Myprovider = ({\n  children\n}) => {\n  const SignupFirebase = async (name, email, password, doners, role) => {\n    if (name && email && password) {\n      createUserWithEmailAndPassword(auth, email, password).then(userCredential => {\n        // Signed up \n        // const user = userCredential.user;\n        Swal.fire(\"Wow brother, good job! User registered successfully.\");\n        console.log(\"User saved to Firestore:\", user);\n      }).catch(error => {\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        console.log(\"Error signing up:\", errorCode, errorMessage);\n        Swal.fire(\"Error signing up. Please try again.\");\n      });\n    } else {\n      Swal.fire(\"Please fill all fields.\");\n    }\n  };\n  // SignIn Exist User\n\n  const SignInfirebase = async (email, password) => {\n    if (email && password) {\n      try {\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\n        const user = userCredential.user;\n        Swal.fire(\"Wow brother, Great! Signed in successfully.\");\n        console.log(\"Signed in user:\", user);\n      } catch (error) {\n        console.error(\"Error signing in:\", error.message);\n        Swal.fire(\"Error signing In. Please try again.\");\n      }\n    } else {\n      Swal.fire(\"Please fill all fields.\");\n    }\n  };\n  // Forget Password Function\n  const ForgetPassword = async email => {\n    if (email) {\n      try {\n        await sendPasswordResetEmail(auth, email);\n        Swal.fire(\"Password reset email sent successfully!\");\n      } catch (error) {\n        console.error(\"Error resetting password:\", error.message);\n        Swal.fire(\"Error resetting password. Please try again.\");\n      }\n    } else {\n      Swal.fire(\"Please provide your email.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Mycontext.Provider, {\n    value: {\n      SignupFirebase,\n      SignInfirebase,\n      ForgetPassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_c = Myprovider;\nexport default Myprovider;\nvar _c;\n$RefreshReg$(_c, \"Myprovider\");","map":{"version":3,"names":["Swal","React","auth","createUserWithEmailAndPassword","signInWithEmailAndPassword","sendPasswordResetEmail","db","doc","setDoc","Mycontext","jsxDEV","_jsxDEV","Myprovider","children","SignupFirebase","name","email","password","doners","role","then","userCredential","fire","console","log","user","catch","error","errorCode","code","errorMessage","message","SignInfirebase","ForgetPassword","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Desktop/test project/myapp/src/context/Myprovider.jsx"],"sourcesContent":["import Swal from \"sweetalert2\";\r\nimport React from \"react\";\r\nimport { auth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, db } from \"../init-firebase\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport Mycontext from \"./Mycontext\";\r\n\r\nconst Myprovider = ({ children }) => {\r\nconst SignupFirebase = async (name, email, password,doners,role) => {\r\n if (name && email && password) {\r\n     createUserWithEmailAndPassword(auth, email, password)\r\n    .then((userCredential) => {\r\n    // Signed up \r\n    // const user = userCredential.user;\r\n      Swal.fire(\"Wow brother, good job! User registered successfully.\");\r\n        console.log(\"User saved to Firestore:\", user);\r\n  })\r\n    .catch((error) => {\r\n     const errorCode = error.code;\r\n     const errorMessage = error.message;\r\n     console.log(\"Error signing up:\", errorCode,errorMessage);\r\n     Swal.fire(\"Error signing up. Please try again.\");\r\n  });\r\n  \r\n  }else{\r\n  Swal.fire(\"Please fill all fields.\");\r\n}\r\n  };\r\n  // SignIn Exist User\r\n\r\n     const SignInfirebase = async (email, password) => {\r\n     if (email && password) {\r\n        try {\r\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n        const user = userCredential.user;\r\n        Swal.fire(\"Wow brother, Great! Signed in successfully.\");\r\n        console.log(\"Signed in user:\", user);\r\n       \r\n        } catch (error) {\r\n        console.error(\"Error signing in:\", error.message);\r\n        Swal.fire(\"Error signing In. Please try again.\");\r\n       \r\n      }\r\n      } else {\r\n      Swal.fire(\"Please fill all fields.\");\r\n    }\r\n  };\r\n         // Forget Password Function\r\n         const ForgetPassword = async (email) => {\r\n         if (email) {\r\n        try {\r\n        await sendPasswordResetEmail(auth, email);\r\n        Swal.fire(\"Password reset email sent successfully!\");\r\n        } catch (error) {\r\n        console.error(\"Error resetting password:\", error.message);\r\n        Swal.fire(\"Error resetting password. Please try again.\");\r\n        }\r\n        } else {\r\n        Swal.fire(\"Please provide your email.\");\r\n     }\r\n  };\r\n  \r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <Mycontext.Provider value={{SignupFirebase,SignInfirebase, ForgetPassword,}}>\r\n      {children}\r\n    </Mycontext.Provider>\r\n  );\r\n};\r\n\r\nexport default Myprovider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}