{"ast":null,"code":"var _jsxFileName = \"C:\\\\Desktop\\\\test project\\\\myapp\\\\src\\\\context\\\\Myprovider.jsx\";\n// import Swal from \"sweetalert2\";\n// import React from \"react\";\n// import { auth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, db } from \"../init-firebase\";\n// import { doc, setDoc } from \"firebase/firestore\";\n// import Mycontext from \"./Mycontext\";\n\n// const Myprovider = ({ children }) => {\n\n//   // Signup Function \n\n//   const SignupFirebase = async (name, email, password, url, address,doners,role) => {\n\n//     if (name && email && password) {\n\n//       createUserWithEmailAndPassword(auth, email, password)\n//   .then((userCredential) => {\n//     // Signed up \n//     const user = userCredential.user;\n//     Swal.fire(\"Wow brother, good job! User registered successfully.\");\n//         console.log(\"User saved to Firestore:\", user);\n//       setDoc(doc(db, \"users\", user.uid), {\n//             name: name,\n//             email: email,\n//             role:role,\n//             password: password,\n//             uid: user.uid,\n//             url:url,\n//             doners:doners,\n//             address: address,\n//             createdAt: new Date(),\n//           });\n\n//     // ...\n//   })\n//   .catch((error) => {\n//     const errorCode = error.code;\n//     const errorMessage = error.message;\n//     console.log(\"Error signing up:\", errorCode,errorMessage);\n//         Swal.fire(\"Error signing up. Please try again.\");\n//   });\n\n// }else{\n//   Swal.fire(\"Please fill all fields.\");\n// }\n//   };\n//   // SignIn Exist User\n\n//   const SignInfirebase = async (email, password) => {\n//     if (email && password) {\n//       try {\n//         const userCredential = await signInWithEmailAndPassword(auth, email, password);\n//         const user = userCredential.user;\n//         Swal.fire(\"Wow brother, Great! Signed in successfully.\");\n//         console.log(\"Signed in user:\", user);\n\n//       } catch (error) {\n//         console.error(\"Error signing in:\", error.message);\n//         Swal.fire(\"Error signing In. Please try again.\");\n\n//       }\n//     } else {\n//       Swal.fire(\"Please fill all fields.\");\n//     }\n//   };\n//   // Forget Password Function\n//   const ForgetPassword = async (email) => {\n//     if (email) {\n//       try {\n//         await sendPasswordResetEmail(auth, email);\n//         Swal.fire(\"Password reset email sent successfully!\");\n//       } catch (error) {\n//         console.error(\"Error resetting password:\", error.message);\n//         Swal.fire(\"Error resetting password. Please try again.\");\n//       }\n//     } else {\n//       Swal.fire(\"Please provide your email.\");\n//     }\n//   };\n\n//   return (\n//     <Mycontext.Provider value={{SignupFirebase,SignInfirebase, ForgetPassword,}}\n//     >\n//       {children}\n//     </Mycontext.Provider>\n//   );\n// };\n\n// export default Myprovider;\n\nimport Swal from \"sweetalert2\";\nimport React from \"react\";\nimport { auth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, db } from \"../init-firebase\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport Mycontext from \"./Mycontext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Myprovider = ({\n  children\n}) => {\n  // Signup Function \n  const SignupFirebase = async (name, email, password, url, address, doners, role) => {\n    if (name && email && password) {\n      try {\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password);\n        const user = userCredential.user;\n        Swal.fire(\"Wow brother, good job! User registered successfully.\");\n\n        // Saving user to Firestore (without storing the password)\n        await setDoc(doc(db, \"users\", user.uid), {\n          name: name,\n          email: email,\n          role: role || \"Donor\",\n          // Default role if not provided\n          uid: user.uid,\n          url: url || \"\",\n          // Provide empty string if no URL\n          doners: doners || [],\n          // Default empty array for donors if not provided\n          address: address || \"\",\n          // Provide empty string if no address\n          createdAt: new Date()\n        });\n      } catch (error) {\n        console.log(\"Error signing up:\", error.message);\n        Swal.fire(\"Error signing up. Please try again.\");\n      }\n    } else {\n      Swal.fire(\"Please fill all fields.\");\n    }\n  };\n\n  // SignIn Existing User\n  const SignInfirebase = async (email, password) => {\n    if (email && password) {\n      try {\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\n        const user = userCredential.user;\n        Swal.fire(\"Wow brother, Great! Signed in successfully.\");\n        console.log(\"Signed in user:\", user);\n      } catch (error) {\n        console.error(\"Error signing in:\", error.message);\n        Swal.fire(\"Error signing In. Please try again.\");\n      }\n    } else {\n      Swal.fire(\"Please fill all fields.\");\n    }\n  };\n\n  // Forget Password Function\n  const ForgetPassword = async email => {\n    if (email) {\n      try {\n        await sendPasswordResetEmail(auth, email);\n        Swal.fire(\"Password reset email sent successfully!\");\n      } catch (error) {\n        console.error(\"Error resetting password:\", error.message);\n        Swal.fire(\"Error resetting password. Please try again.\");\n      }\n    } else {\n      Swal.fire(\"Please provide your email.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Mycontext.Provider, {\n    value: {\n      SignupFirebase,\n      SignInfirebase,\n      ForgetPassword\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_c = Myprovider;\nexport default Myprovider;\nvar _c;\n$RefreshReg$(_c, \"Myprovider\");","map":{"version":3,"names":["Swal","React","auth","createUserWithEmailAndPassword","signInWithEmailAndPassword","sendPasswordResetEmail","db","doc","setDoc","Mycontext","jsxDEV","_jsxDEV","Myprovider","children","SignupFirebase","name","email","password","url","address","doners","role","userCredential","user","fire","uid","createdAt","Date","error","console","log","message","SignInfirebase","ForgetPassword","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Desktop/test project/myapp/src/context/Myprovider.jsx"],"sourcesContent":["// import Swal from \"sweetalert2\";\r\n// import React from \"react\";\r\n// import { auth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, db } from \"../init-firebase\";\r\n// import { doc, setDoc } from \"firebase/firestore\";\r\n// import Mycontext from \"./Mycontext\";\r\n\r\n// const Myprovider = ({ children }) => {\r\n \r\n//   // Signup Function \r\n \r\n//   const SignupFirebase = async (name, email, password, url, address,doners,role) => {\r\n    \r\n//     if (name && email && password) {\r\n\r\n//       createUserWithEmailAndPassword(auth, email, password)\r\n//   .then((userCredential) => {\r\n//     // Signed up \r\n//     const user = userCredential.user;\r\n//     Swal.fire(\"Wow brother, good job! User registered successfully.\");\r\n//         console.log(\"User saved to Firestore:\", user);\r\n//       setDoc(doc(db, \"users\", user.uid), {\r\n//             name: name,\r\n//             email: email,\r\n//             role:role,\r\n//             password: password,\r\n//             uid: user.uid,\r\n//             url:url,\r\n//             doners:doners,\r\n//             address: address,\r\n//             createdAt: new Date(),\r\n//           });\r\n    \r\n\r\n\r\n//     // ...\r\n//   })\r\n//   .catch((error) => {\r\n//     const errorCode = error.code;\r\n//     const errorMessage = error.message;\r\n//     console.log(\"Error signing up:\", errorCode,errorMessage);\r\n//         Swal.fire(\"Error signing up. Please try again.\");\r\n//   });\r\n  \r\n// }else{\r\n//   Swal.fire(\"Please fill all fields.\");\r\n// }\r\n//   };\r\n//   // SignIn Exist User\r\n\r\n//   const SignInfirebase = async (email, password) => {\r\n//     if (email && password) {\r\n//       try {\r\n//         const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n//         const user = userCredential.user;\r\n//         Swal.fire(\"Wow brother, Great! Signed in successfully.\");\r\n//         console.log(\"Signed in user:\", user);\r\n       \r\n//       } catch (error) {\r\n//         console.error(\"Error signing in:\", error.message);\r\n//         Swal.fire(\"Error signing In. Please try again.\");\r\n       \r\n//       }\r\n//     } else {\r\n//       Swal.fire(\"Please fill all fields.\");\r\n//     }\r\n//   };\r\n//   // Forget Password Function\r\n//   const ForgetPassword = async (email) => {\r\n//     if (email) {\r\n//       try {\r\n//         await sendPasswordResetEmail(auth, email);\r\n//         Swal.fire(\"Password reset email sent successfully!\");\r\n//       } catch (error) {\r\n//         console.error(\"Error resetting password:\", error.message);\r\n//         Swal.fire(\"Error resetting password. Please try again.\");\r\n//       }\r\n//     } else {\r\n//       Swal.fire(\"Please provide your email.\");\r\n//     }\r\n//   };\r\n  \r\n\r\n\r\n\r\n\r\n\r\n//   return (\r\n//     <Mycontext.Provider value={{SignupFirebase,SignInfirebase, ForgetPassword,}}\r\n//     >\r\n//       {children}\r\n//     </Mycontext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default Myprovider;\r\n\r\nimport Swal from \"sweetalert2\";\r\nimport React from \"react\";\r\nimport { auth, createUserWithEmailAndPassword, signInWithEmailAndPassword, sendPasswordResetEmail, db } from \"../init-firebase\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport Mycontext from \"./Mycontext\";\r\n\r\nconst Myprovider = ({ children }) => {\r\n \r\n  // Signup Function \r\n  const SignupFirebase = async (name, email, password, url, address, doners, role) => {\r\n    if (name && email && password) {\r\n      try {\r\n        const userCredential = await createUserWithEmailAndPassword(auth, email, password);\r\n        const user = userCredential.user;\r\n        Swal.fire(\"Wow brother, good job! User registered successfully.\");\r\n        \r\n        // Saving user to Firestore (without storing the password)\r\n        await setDoc(doc(db, \"users\", user.uid), {\r\n          name: name,\r\n          email: email,\r\n          role: role || \"Donor\",  // Default role if not provided\r\n          uid: user.uid,\r\n          url: url || \"\",  // Provide empty string if no URL\r\n          doners: doners || [], // Default empty array for donors if not provided\r\n          address: address || \"\", // Provide empty string if no address\r\n          createdAt: new Date(),\r\n        });\r\n      } catch (error) {\r\n        console.log(\"Error signing up:\", error.message);\r\n        Swal.fire(\"Error signing up. Please try again.\");\r\n      }\r\n    } else {\r\n      Swal.fire(\"Please fill all fields.\");\r\n    }\r\n  };\r\n\r\n  // SignIn Existing User\r\n  const SignInfirebase = async (email, password) => {\r\n    if (email && password) {\r\n      try {\r\n        const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n        const user = userCredential.user;\r\n        Swal.fire(\"Wow brother, Great! Signed in successfully.\");\r\n        console.log(\"Signed in user:\", user);\r\n      } catch (error) {\r\n        console.error(\"Error signing in:\", error.message);\r\n        Swal.fire(\"Error signing In. Please try again.\");\r\n      }\r\n    } else {\r\n      Swal.fire(\"Please fill all fields.\");\r\n    }\r\n  };\r\n\r\n  // Forget Password Function\r\n  const ForgetPassword = async (email) => {\r\n    if (email) {\r\n      try {\r\n        await sendPasswordResetEmail(auth, email);\r\n        Swal.fire(\"Password reset email sent successfully!\");\r\n      } catch (error) {\r\n        console.error(\"Error resetting password:\", error.message);\r\n        Swal.fire(\"Error resetting password. Please try again.\");\r\n      }\r\n    } else {\r\n      Swal.fire(\"Please provide your email.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Mycontext.Provider value={{SignupFirebase, SignInfirebase, ForgetPassword }}>\r\n      {children}\r\n    </Mycontext.Provider>\r\n  );\r\n};\r\n\r\nexport default Myprovider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}